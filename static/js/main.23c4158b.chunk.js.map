{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","titale","mode","EnableDarkMode","className","href","type","id","onClick","htmlFor","TextForm","props","useState","text","setText","heading","value","onChange","e","target","rows","newtext","toUpperCase","Alertshow","toLowerCase","arr","split","i","length","charAt","slice","str2","join","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","role","msg","App","setmode","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.23c4158b.chunk.js","sourcesContent":["import React from 'react'\r\nconst Navbar = ({titale,mode,EnableDarkMode}) => {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{titale}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">About</a>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${mode==='light'? 'dark':\"light\"}`}>\r\n              <input className=\"form-check-input\"  onClick={EnableDarkMode}  type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enabled DarkMode</label>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","\r\nimport React,{useState} from 'react'\r\n\r\nconst TextForm = (props) => {\r\n    const [text,setText]=useState(\"Enter the  Text Here\")\r\n    const handlertoUpercase=(e)=>{    \r\n    setText(e.target.value)\r\n    }\r\n    const convert=()=>{\r\n     let newtext= text.toUpperCase()\r\n    setText(newtext)\r\n     props.Alertshow('Text is succfully converted to uppercase',\"successs\")\r\n    }\r\n    const convert1=()=>{\r\n        let newtext= text.toLowerCase()\r\n       setText(newtext)\r\n       \r\n        props.Alertshow('Text is succfully converted to lowercase',\"successs\")\r\n       }\r\n       const capitalize=()=>{\r\n                const arr=text.split(\" \")\r\n                 \r\n                 for (var i = 0; i < arr.length; i++) {\r\n                    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n                \r\n                }\r\n                const str2 = arr.join(\" \");\r\n                setText(str2)\r\n                \r\n\r\n        }\r\n        const handleExpress=()=>{\r\n            let newtext=text.split(/[ ]+/);\r\n            setText(newtext.join(\" \"))\r\n           \r\n        }\r\n        const copy=()=>{\r\n           let text=document.getElementById(\"mybox\")\r\n           text.select();\r\n           navigator.clipboard.writeText(text.value)\r\n           }\r\n            // props.Alertshow('Text is succfully copies',\"successs\")\r\n       const clear=()=>{\r\n        \r\n       setText('')\r\n    \r\n       }\r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text}  onChange={handlertoUpercase}     id=\"mybox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className='btn btn-primary' onClick={convert}>Conver To Uper Case</button>\r\n             <button className='btn btn-primary mx-3' onClick={convert1}>Conver To Lower Case</button> \r\n             <button className='btn btn-primary mx-3' onClick={capitalize}>Capitalize </button> \r\n             <button className='btn btn-primary mx-3' onClick={handleExpress}>RemoveExtraSpace </button> \r\n             <button className='btn btn-primary mx-3' onClick={copy}>CopyText </button> \r\n             <button className='btn btn-danger mx-3' onClick={clear}>Clear</button> \r\n             \r\n        </div>\r\n        <div className='container  my-3'>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length } words and {text.length}</p>\r\n            <p>{0.008*text.split(\" \").length }Minutes Time to Read The Above Text</p>\r\n            <h2>Preview</h2>\r\n            <p className='bg-red'>{text}</p>\r\n           \r\n        </div>\r\n        </>\r\n          \r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n    \r\n       props.alert && <div className=\"alert alert-success\" role=\"alert\" >\r\n                   <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n                 </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React,{useState} from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nfunction App() {\n  const[mode,setmode]=useState('light')\n  const[alert,setAlert]=useState(null)\n  const DarkMode=()=>{\n    if(mode===\"dark\"){\n      setmode('light')\n      Alertshow('Light mode is successfully! enabled',\"success\")\n    }\n    else{\n      setmode(\"dark\")\n      Alertshow('Dark mode is successfully! enabled',\"success\")\n    }\n\n  }\n  \n    const Alertshow=(message,type)=>{\n      setAlert({\n        msg:message,\n        type:type\n      });\n      setTimeout(() => {\n        setAlert(null)\n      }, 1500);   \n    }\n  return (\n    <>\n       \n    \n      \n          <Navbar titale=\"TextUtils\" mode={mode} EnableDarkMode={DarkMode}/>\n      <Alert  alert={alert}  />\n      <div className='container my-5' >\n    <TextForm Alertshow={Alertshow}  heading=\"Enter The Text To Analyze\"/>\n      </div>\n     \n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}